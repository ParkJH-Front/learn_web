.container {
  display: grid;
  /* grid 트랙의 형태, 크기를 지정 */
  grid-template-rows: 200px 200px 300px; /* 행(row) 배치의 조건 지정 */
  grid-template-columns: 200px 200px 300px; /* 열(columns) 배치의 조건 지정 */
  grid-template-columns: 1fr 1fr 1fr ; /* fr 앞의 숫자 비율대로 영역을 나눔. */
  grid-template-columns: repeat(3, 1fr); /* repeat(반복횟수, 반복값) 반복값을 반복횟수만큼 반복 */
  grid-template-columns: minmax(100px, auto); /* minmax(최소값, 최대값) auto는 자동으로 */
  grid-template-columns: auto-fill; /* columns의 갯수를 너비의 한계만큼 채움 */
  grid-template-columns: auto-fit; /* columns의 갯수를 너비의 한계만큼 채움, 단 여백이없음 */
  grid-auto-rows: ; or gird-auto-columns: ;/* 
  grid-template-rows: repeat(3 minmax(100px, auto)); 이 3번의 반복횟수를 지정하기 애매할때
  -> grid-auto-rows: minmax(100px, auto); 알아서 횟수를 지정할 수 있는 느낌 */

  row-gap: ; /* row 그리드 셀 간격 설정*/
  column-gap: ; /* column 그리드 셀 간격 설정*/
	
	grid-template-areas:  /* 각 영역에 이름을 붙이고, 그를 활용하여 배치 */
		"header header header"
		"   a    main    b   "
		"   .     .      .   "
		"footer footer footer";
	
	.header { grid-area: header; }
	.sidebar-a { grid-area: a; }
	.main-content { grid-area: main; }
	.sidebar-b { grid-area: b; }
	.footer { grid-area: footer; }
	}
}

.item {
	grid-column-start: 1;
	grid-column-end: 3;
	-> grid-column: 1/3;
	grid-row-start: 2;
	grid-row-end: 1;
	-> grid-row: 2/1;
	/* 각 셀의 영역을 지정하는 속성, 해당 영역별로 속성을 다르게 줄 수 있음. */
}